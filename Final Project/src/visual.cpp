#include "helper.h"
#include "visual.h"
#include "LB_consts.h"
#include <cstdio>

#ifdef _SEQ_
void LBM::writeVtkOutput( const char * filename, int t, int const *size, double *density, const double *velocity ) {

    char fn[80];
    int xlen = size[0] + 2;
    int ylen = size[1] + 2;

    int np = size[0] * size[1] * size[2];

    sprintf(fn, "%s.%i.vtk", filename, t);

    FILE *fp = nullptr;
    fp = fopen(fn, "w");
    if (fp == nullptr) {
        ERROR("Failed to open file!");
        return;
    }

    // write header
    fprintf(fp, "# vtk DataFile Version 2.0\n");
    fprintf(fp, "generated by CFD-lab course output \n");
    fprintf(fp, "ASCII\n\n");
    fprintf(fp, "DATASET STRUCTURED_GRID\n");
    fprintf(fp, "DIMENSIONS %d %d %d \n", size[0], size[1], size[2] );
    fprintf(fp, "POINTS %d double\n\n", np );

    // print lattice points
    double dx = 0.1;
    double dy = 0.1;
    double dz = 0.1

    int i, j, k;
    for( k = 0; k < size[2]; k++ ) {
        for( j = 0; j < size[1]; j++ ) {
            for( i = 0; i < size[0]; i++ ) {
                fprintf( fp, "%f %f %f\n", 1.0 * i * dx, 1.0 * j * dy, 1.0 * k * dz );
            }
        }
    }

    // write density data
    fprintf(fp, "\nPOINT_DATA %d \n", np );
    fprintf(fp, "SCALARS density double 1 \n");
    fprintf(fp, "LOOKUP_TABLE default \n");

    for( k = 1; k <= size[2]; k++ ) {
        for( j = 1; j <= size[1]; j++ ) {
            for( i = 1; i <= size[0]; i++ ) {
                fprintf( fp, "%f\n", density[ k * ( xlen * ylen ) + j * xlen + i ] );
            }
        }
    }

    // compute velocities for all cells
    fprintf(fp, "\nVECTORS velocity double\n");
    double vel[3] = { 0 };
    int idx;

    for( k = 1; k <= size[2]; k++ ) {
        for( j = 1; j <= size[1]; j++ ) {
            for( i = 1; i <= size[0]; i++ ) {
                idx = DIM * ( k * ( xlen * ylen ) + j * xlen + i );

                vel[0] = velocity[ idx + 0 ];
                vel[1] = velocity[ idx + 1 ];
                vel[2] = velocity[ idx + 2 ];

                fprintf(fp, "%f %f %f\n", vel[0], vel[1], vel[2]);
            }
        }
    }

    // close the file
    if (fclose(fp)) {
        ERROR("Failed to close file!");
        return;
    }
}
#elif _MPI_
void LBM::writeVtkOutput( const char * filename, int t, int rank, int widthRank, int depthRank, int heightRank
                        , int const *size, double *density, const double *velocity ) {

    char fn[80];
    int xlen = size[0] + 2;
    int ylen = size[1] + 2;

    int np = size[0] * size[1] * size[2];

    sprintf(fn, "%s.%i.%i.vtk", filename, rank, t);

    FILE *fp = nullptr;
    fp = fopen(fn, "w");
    if (fp == nullptr) {
        ERROR("Failed to open file!");
        return;
    }

    // write header
    fprintf(fp, "# vtk DataFile Version 2.0\n");
    fprintf(fp, "generated by CFD-lab course output \n");
    fprintf(fp, "ASCII\n\n");
    fprintf(fp, "DATASET STRUCTURED_GRID\n");
    fprintf(fp, "DIMENSIONS %d %d %d \n", size[0], size[1], size[2] );
    fprintf(fp, "POINTS %d double\n\n", np );

    // print lattice points
    double dx = 1.0 / (size[0] - 1);
    double dy = 1.0 / (size[1] - 1);
    double dz = 1.0 / (size[2] - 1);

    double originX = ( widthRank * ( size[0] ) ) * dx;
    double originY = ( depthRank * ( size[1] ) ) * dy;
    double originZ = ( heightRank * ( size[2] ) ) * dz;


    int i, j, k;
    for( k = 0; k < size[2]; k++ ) {
        for( j = 0; j < size[1]; j++ ) {
            for( i = 0; i < size[0]; i++ ) {
                fprintf( fp, "%f %f %f\n", originX + (i*dx), originY + (j*dy), originZ + (k*dz) );
            }
        }
    }

    // write density data
    fprintf(fp, "\nPOINT_DATA %d \n", np );
    fprintf(fp, "SCALARS density double 1 \n");
    fprintf(fp, "LOOKUP_TABLE default \n");

    for( k = 1; k <= size[2]; k++ ) {
        for( j = 1; j <= size[1]; j++ ) {
            for( i = 1; i <= size[0]; i++ ) {
                fprintf( fp, "%f\n", density[ k * ( xlen * ylen ) + j * xlen + i ] );
            }
        }
    }

    // compute velocities for all cells
    fprintf(fp, "\nVECTORS velocity double\n");
    double vel[3] = { 0 };
    int idx;

    for( k = 1; k <= size[2]; k++ ) {
        for( j = 1; j <= size[1]; j++ ) {
            for( i = 1; i <= size[0]; i++ ) {
                idx = DIM * ( k * ( xlen * ylen ) + j * xlen + i );

                vel[0] = velocity[ idx + 0 ];
                vel[1] = velocity[ idx + 1 ];
                vel[2] = velocity[ idx + 2 ];

                fprintf(fp, "%f %f %f\n", vel[0], vel[1], vel[2]);
            }
        }
    }

    // close the file
    if (fclose(fp)) {
        ERROR("Failed to close file!");
        return;
    }
}
#endif
